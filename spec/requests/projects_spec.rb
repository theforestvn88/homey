require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/projects", type: :request do
  let(:user) { create(:user) }

  let(:valid_attributes) {
    { user_id: user.id, title: 'a project' }
  }

  let(:invalid_attributes) {
    { user_id: nil, title: 'a project' }
  }

  before do
    sign_in user
  end

  describe "GET /index" do
    it "renders a successful response" do
      Project.create! valid_attributes
      get projects_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      project = Project.create! valid_attributes
      get project_url(project)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_project_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      project = Project.create! valid_attributes
      get edit_project_url(project)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Project" do
        expect {
          post projects_url, params: { project: valid_attributes }
        }.to change(Project, :count).by(1)
      end

      it "redirects to the created project" do
        post projects_url, params: { project: valid_attributes }
        expect(response).to redirect_to(project_url(Project.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Project" do
        expect {
          post projects_url, params: { project: invalid_attributes }
        }.to change(Project, :count).by(0)
      end


      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post projects_url, params: { project: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested project" do
        project = Project.create! valid_attributes
        patch project_url(project), params: { project: new_attributes }
        project.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the project" do
        project = Project.create! valid_attributes
        patch project_url(project), params: { project: new_attributes }
        project.reload
        expect(response).to redirect_to(project_url(project))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        project = Project.create! valid_attributes
        patch project_url(project), params: { project: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested project" do
      project = Project.create! valid_attributes
      expect {
        delete project_url(project)
      }.to change(Project, :count).by(-1)
    end

    it "redirects to the projects list" do
      project = Project.create! valid_attributes
      delete project_url(project)
      expect(response).to redirect_to(projects_url)
    end
  end

  describe "GET /projects/:id/load_more_comments" do
    let!(:project) { create(:project, user_id: user.id) }
    let!(:comments) { (1..20).map { |i| create(:comment, user_id: user.id, project_id: project.id) } }

    it "append comments" do
      get load_more_comments_project_path(id: project.id), as: :turbo_stream
      assert_select("turbo-stream[action='append'][target='project_#{project.id}_comments']", 1)
      assert_select("turbo-stream[action='replace'][target='project_#{project.id}_load_more']", 1)
    end

    it "hide load more if there's no more comments" do
      get load_more_comments_project_path(id: project.id, offset: 20), as: :turbo_stream
      assert_select("turbo-stream[action='append'][target='project_#{project.id}_comments']", 1)
      assert_select("turbo-stream[action='replace'][target='project_#{project.id}_load_more']", 0)
    end
  end

  describe "Patch /projects/:id/status" do
    let!(:project) { create(:project, user_id: user.id) }
    let!(:assignment) { create(:assignment, user_id: user.id, project_id: project.id) }

    it "update project status" do
      patch update_status_project_path(project), params: { project: { status: 'active' } }, as: :turbo_stream
      assert_select("turbo-stream[action='update'][target='project_#{project.id}_status']", 1)

      project.reload
      expect(project.active?).to be_truthy
    end

    it "prepend status change comment" do
      patch update_status_project_path(project), params: { project: { status: 'active' } }, as: :turbo_stream
      assert_select("turbo-stream[action='prepend'][target='project_#{project.id}_comments']", 1)
    end
  end
end
